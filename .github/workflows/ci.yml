name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types: ['opened', 'reopened']
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies in pipenv
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          cd Ephemerator
          pipenv install --deploy --dev

      - name: Analysing the code with pylint
        run: |
          cd Ephemerator
          pipenv run pylint --rcfile ../../pylintrc `ls -R|grep .py$|xargs`

      - name: Docker Lint
        uses: luke142367/Docker-Lint-Action@v1.1.1
        with:
          target: Ephemerator/Dockerfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Markdown Linting Action
        uses: docker://avtodev/markdown-lint:v1
        with:
          args: './README.md'

  docker:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: awaldow/ephemerator
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,suffix=-latest,event=branch
            type=ref,event=pr
            type=ref,event=tag
            latest

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: Ephemerator
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}